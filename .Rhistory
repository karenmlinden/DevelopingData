rfresult <- predict(rfmodel, testing)
gbmresult <- predict(gbmmodel, testing)
ldaresult <- predict(ldamodel, testing)
combined.data <- data.frame(rfresult, gbmresult, ldaresult, diagnosis=testing$diagnosis)
combined.model <- train(diagnosis~., data=combined.data, method="rf")
combined.result <- predict(combined.model, testing)
confusionMatrix(testing$diagnosis, rfresult)$overall['Accuracy']
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData <- data.frame(diagnosis, predictors)
inTrain <- createDataPartition(adData$diagnosis, p=3/4)[[1]]
training <- adData[inTrain, ]
testing <- adData[-inTrain, ]
dim(adData) # 333 131
# head(adData)
set.seed(62433)
fitRf <- train(diagnosis ~ ., data=training, method="rf")
fitGBM <- train(diagnosis ~ ., data=training, method="gbm")
fitLDA <- train(diagnosis ~ ., data=training, method="lda")
predRf <- predict(fitRf, testing)
predGBM <- predict(fitGBM, testing)
predLDA <- predict(fitLDA, testing)
pred <- data.frame(predRf, predGBM, predLDA, diagnosis=testing$diagnosis)
# Stack the predictions together using random forests ("rf")
fit <- train(diagnosis ~., data=pred, method="rf")
predFit <- predict(fit, testing)
c1 <- confusionMatrix(predRf, testing$diagnosis)$overall[1]
c2 <- confusionMatrix(predGBM, testing$diagnosis)$overall[1]
c3 <- confusionMatrix(predLDA, testing$diagnosis)$overall[1]
c4 <- confusionMatrix(predFit, testing$diagnosis)$overall[1]
print(paste(c1, c2, c3, c4))
# Stacked Accuracy: 0.79 is better than random forests and lda
# and the same as boosting.
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
# Set the seed to 325 and fit a support vector machine using the e1071 package
# to predict Compressive Strength using the default settings. Predict on the
# testing set. What is the RMSE?
set.seed(325)
library(e1071)
library(caret)
fit <- train(CompressiveStrength ~ ., data = training, method = "svmRadial")
install.packages("kernlab")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
# Set the seed to 325 and fit a support vector machine using the e1071 package
# to predict Compressive Strength using the default settings. Predict on the
# testing set. What is the RMSE?
set.seed(325)
library(e1071)
library(caret)
fit <- train(CompressiveStrength ~ ., data = training, method = "svmRadial")
prediction <- predict(fit, testing)
accuracy(prediction, testing$CompressiveStrength)
library kernlab
library(kernlab)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
# Set the seed to 325 and fit a support vector machine using the e1071 package
# to predict Compressive Strength using the default settings. Predict on the
# testing set. What is the RMSE?
set.seed(325)
library(e1071)
library(caret)
fit <- train(CompressiveStrength ~ ., data = training, method = "svmRadial")
prediction <- predict(fit, testing)
accuracy(prediction, testing$CompressiveStrength)
#Load the data on the number of visitors to the instructors blog from here:
#  https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
# Fit a model using the bats() function in the forecast package to the training
# time series. Then forecast this model for the remaining time points. For how
# many of the testing points is the true value within the 95% prediction
# interval bounds?
library(forecast)
library(quantmod)
# fit a model
fit <- bats(tstrain)
# check how long the test set is, so you can predict beyond trainign
h <- dim(testing)[1]
# forecast the model for remaining time points
fcast <- forecast(fit, level = 95, h = h)
# get the accuracy
accuracy(fcast, testing$visitsTumblr)
# check what percentage of times that the actual number of visitors was within
# 95% confidence interval
result <- c()
l <- length(fcast$lower)
for (i in 1:l){
x <- testing$visitsTumblr[i]
a <- fcast$lower[i] < x & x < fcast$upper[i]
result <- c(result, a)
}
sum(result)/l * 100
install.packages("quantmod")
#Load the data on the number of visitors to the instructors blog from here:
#  https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
# Fit a model using the bats() function in the forecast package to the training
# time series. Then forecast this model for the remaining time points. For how
# many of the testing points is the true value within the 95% prediction
# interval bounds?
library(forecast)
library(quantmod)
# fit a model
fit <- bats(tstrain)
# check how long the test set is, so you can predict beyond trainign
h <- dim(testing)[1]
# forecast the model for remaining time points
fcast <- forecast(fit, level = 95, h = h)
# get the accuracy
accuracy(fcast, testing$visitsTumblr)
# check what percentage of times that the actual number of visitors was within
# 95% confidence interval
result <- c()
l <- length(fcast$lower)
for (i in 1:l){
x <- testing$visitsTumblr[i]
a <- fcast$lower[i] < x & x < fcast$upper[i]
result <- c(result, a)
}
sum(result)/l * 100
install.packages("lubridate")
#Load the data on the number of visitors to the instructors blog from here:
#  https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
# Fit a model using the bats() function in the forecast package to the training
# time series. Then forecast this model for the remaining time points. For how
# many of the testing points is the true value within the 95% prediction
# interval bounds?
library(forecast)
library(quantmod)
# fit a model
fit <- bats(tstrain)
# check how long the test set is, so you can predict beyond trainign
h <- dim(testing)[1]
# forecast the model for remaining time points
fcast <- forecast(fit, level = 95, h = h)
# get the accuracy
accuracy(fcast, testing$visitsTumblr)
# check what percentage of times that the actual number of visitors was within
# 95% confidence interval
result <- c()
l <- length(fcast$lower)
for (i in 1:l){
x <- testing$visitsTumblr[i]
a <- fcast$lower[i] < x & x < fcast$upper[i]
result <- c(result, a)
}
sum(result)/l * 100
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate)  # For year() function below
library(forecast)
dat <- read.csv("./data/gaData.csv")
training <- dat[year(dat$date) < 2012, ]
testing <- dat[(year(dat$date)) > 2011, ]
tstrain <- ts(training$visitsTumblr)
fit <- bats(tstrain)
fit
pred <- forecast(fit, level=95, h=dim(testing)[1])
names(data.frame(pred))
predComb <- cbind(testing, data.frame(pred))
names(testing)
names(predComb)
predComb$in95 <- (predComb$Lo.95 < predComb$visitsTumblr) &
(predComb$visitsTumblr < predComb$Hi.95)
# How many of the testing points is the true value within the
# 95% prediction interval bounds?
prop.table(table(predComb$in95))[2] # 0.9617021library(lubridate)  # For year() function below
library(forecast)
dat <- read.csv("./data/gaData.csv")
training <- dat[year(dat$date) < 2012, ]
testing <- dat[(year(dat$date)) > 2011, ]
tstrain <- ts(training$visitsTumblr)
fit <- bats(tstrain)
fit
pred <- forecast(fit, level=95, h=dim(testing)[1])
names(data.frame(pred))
predComb <- cbind(testing, data.frame(pred))
names(testing)
names(predComb)
predComb$in95 <- (predComb$Lo.95 < predComb$visitsTumblr) &
(predComb$visitsTumblr < predComb$Hi.95)
# How many of the testing points is the true value within the
# 95% prediction interval bounds?
prop.table(table(predComb$in95))[2] # 0.9617021
library(lubridate)  # For year() function below
library(forecast)
data(mtcars)
library("ggplot2")
mtcars$am <- factor(mtcars$am, levels = c(0, 1), labels = c("automatic", "manual"))
mpg = ggplot(mtcars, aes(am, mpg, fill = am))
mpg = mpg + geom_boxplot()
mpg + geom_jitter(position = position_jitter(width = 0.05, height = 0)) + xlab("")
boxplot(mpg ~ am, data = mtcars, col = (c("red","blue")), ylab = "Miles Per Gallon", xlab = "Transmission Type")
data(mtcars)
library("ggplot2")
mtcars$am <- factor(mtcars$am, levels = c(0, 1), labels = c("automatic", "manual"))
mpg = ggplot(mtcars, aes(am, mpg, fill = am))
mpg = mpg + boxplot(mpg ~ am, data = mtcars, col = (c("red","blue")), ylab = "Miles Per Gallon", xlab = "Transmission Type")
mpg + geom_jitter(position = position_jitter(width = 0.05, height = 0)) + xlab("")
data(mtcars)
library("ggplot2")
mtcars$am <- factor(mtcars$am, levels = c(0, 1), labels = c("automatic", "manual"))
mpg = ggplot(mtcars, aes(am, mpg, fill = am))
mpg = mpg + geom_boxplot(mpg ~ am, data = mtcars, col = (c("red","blue")), ylab = "Miles Per Gallon", xlab = "Transmission Type")
mpg + geom_jitter(position = position_jitter(width = 0.05, height = 0)) + xlab("")
data(mtcars)
library("ggplot2")
mtcars$am <- factor(mtcars$am, levels = c(0, 1), labels = c("automatic", "manual"))
mpg = ggplot(mtcars, aes(am, mpg, fill = am))
mpg = mpg + geom_boxplot()
mpg + geom_jitter(position = position_jitter(width = 0.05, height = 0)) + xlab("Transmission Type")+  ylab("Miles Per Gallon")
data(mtcars)
library("ggplot2")
mtcars$am <- factor(mtcars$am, levels = c("red","blue"), labels = c("automatic", "manual"))
mpg = ggplot(mtcars, aes(am, mpg, fill = am))
mpg = mpg + geom_boxplot()
mpg + geom_jitter(position = position_jitter(width = 0.05, height = 0)) + xlab("Transmission Type") + ylab("Miles Per Gallon")
data(mtcars)
library("ggplot2")
mtcars$am <- factor(mtcars$am, levels = c(1,3), labels = c("automatic", "manual"))
mpg = ggplot(mtcars, aes(am, mpg, fill = am))
mpg = mpg + geom_boxplot()
mpg + geom_jitter(position = position_jitter(width = 0.05, height = 0)) + xlab("Transmission Type") + ylab("Miles Per Gallon")
data(mtcars)
library("ggplot2")
mtcars$am <- factor(mtcars$am, levels = c(0, 1), labels = c("automatic", "manual"))
mpg = ggplot(mtcars, aes(am, mpg, fill = am))
mpg = mpg + geom_boxplot()
mpg + geom_jitter(position = position_jitter(width = 0.05, height = 0)) + xlab("Transmission Type") + ylab("Miles Per Gallon")
a <- mtcars[mtcars$am == "automatic", ]
m <- mtcars[mtcars$am == "manual", ]
t.test(m$mpg, a$mpg ,alternative = "greater")
data("mtcars")
sort(cor(mtcars)[1, ]
data("mtcars")
sort(cor(mtcars)[1, ])
step_model <- step(lm(data = mtcars, mpg~.), trace=0)
summary(step_model)
stepM <- step(lm(data = mtcars, mpg~.), trace=0)
summary(stepM)
M1 <- lm(mpg ~ wt + qsec + am, data = mtcars)
M2 <- lm(mpg ~ wt + cyl + disp + hp, data = mtcars)
M3 <- lm(mpg ~ ., data = mtcars)
anova(Model1, Model2, Model3)
M1 <- lm(mpg ~ wt + qsec + am, data = mtcars)
M2 <- lm(mpg ~ wt + cyl + disp + hp, data = mtcars)
M3 <- lm(mpg ~ ., data = mtcars)
anova(M1, M2, M3)
fit1 <- lm(mpg ~ wt + qsec + am, data = mtcars)
fit2 <- lm(mpg ~ wt + cyl + disp + hp, data = mtcars)
fit3 <- lm(mpg ~ ., data = mtcars)
anova(fit1, fit2, fit3)
r1 <- resid(fit1)
summary(r1)
fit4 <- lm(data=mtcars, mpg~wt+am+wt*am)
a2 <- mtcars[mtcars$am == 0, ]
m2 <- mtcars[mtcars$am == 1, ]
plot(a2$wt, a2$mpg, col="light blue", pch=19, cex=2, xlab="Weight", ylab="mpg")
points(m2$wt, m2$mpg, col="green", pch=19, cex=2)
abline(c(fit4$coeff[1], fit4$coeff[2]), col="blue", lwd=3, lty=2)
abline(c(fit4$coeff[1]+fit4$coeff[3], fit4$coeff[2]+fit4$coeff[4]), col="red", lwd=3, lty=2)
legend("topright", pch=19, col=c("light blue", "green"), legend=c("Manual (am=1)", "Automatic (am=0)"))
fit4 <- lm(data=mtcars, mpg~wt+am+wt*am)
a2 <- mtcars[mtcars$am == 0, ]
m2 <- mtcars[mtcars$am == 1, ]
plot(a2$wt, a2$mpg, col="light blue", pch=19, cex=2, xlab="Weight", ylab="Miles Per Gallon")
points(m2$wt, m2$mpg, col="green", pch=19, cex=2)
abline(c(fit4$coeff[1], fit4$coeff[2]), col="light blue", lwd=3, lty=2)
abline(c(fit4$coeff[1]+fit4$coeff[3], fit4$coeff[2]+fit4$coeff[4]), col="green", lwd=3, lty=2)
legend("topright", pch=19, col=c("light blue", "green"), legend=c("Manual (am=1)", "Automatic (am=0)"))
fit4 <- lm(data=mtcars, mpg~wt+am+wt*am)
a2 <- mtcars[mtcars$am == 0, ]
m2 <- mtcars[mtcars$am == 1, ]
plot(a2$wt, a2$mpg, col="light blue", pch=19, cex=2, xlab="Weight", ylab="Miles Per Gallon")
points(m2$wt, m2$mpg, col="light green", pch=19, cex=2)
abline(c(fit4$coeff[1], fit4$coeff[2]), col="blue", lwd=3, lty=2)
abline(c(fit4$coeff[1]+fit4$coeff[3], fit4$coeff[2]+fit4$coeff[4]), col="green", lwd=3, lty=2)
legend("topright", pch=19, col=c("light blue", "green"), legend=c("Manual (am=1)", "Automatic (am=0)"))
fit4 <- lm(data=mtcars, mpg~wt+am+wt*am)
a2 <- mtcars[mtcars$am == 0, ]
m2 <- mtcars[mtcars$am == 1, ]
plot(a2$wt, a2$mpg, col="light blue", pch=19, cex=2, xlab="Weight", ylab="Miles Per Gallon")
points(m2$wt, m2$mpg, col="light green", pch=19, cex=2)
abline(c(fit4$coeff[1], fit4$coeff[2]), col="blue", lwd=3, lty=2)
abline(c(fit4$coeff[1]+fit4$coeff[3], fit4$coeff[2]+fit4$coeff[4]), col="green", lwd=3, lty=2)
legend("topright", pch=19, col=c("light blue", "green"), legend=c("Manual", "Automatic"))
fit4 <- lm(data=mtcars, mpg~wt+am+wt*am)
a2 <- mtcars[mtcars$am == 0, ]
m2 <- mtcars[mtcars$am == 1, ]
plot(a2$wt, a2$mpg, col="light blue", pch=19, cex=2, xlab="Weight", ylab="Miles Per Gallon")
points(m2$wt, m2$mpg, col="green", pch=19, cex=2)
abline(c(fit4$coeff[1], fit4$coeff[2]), col="blue", lwd=3, lty=2)
abline(c(fit4$coeff[1]+fit4$coeff[3], fit4$coeff[2]+fit4$coeff[4]), col="green", lwd=3, lty=2)
legend("topright", pch=19, col=c("light blue", "green"), legend=c("Manual", "Automatic"))
par(mfrow = c(1, 2))
mpg <- mtcars$mpg
his <- hist(mpg, breaks=10, col="red", xlab="Miles Per Gallon", main="Histogram of MPG")
x <- seq(min(mpg),max(mpg),length=40)
y <- dnorm(x,mean=mean(mpg),sd=sd(mpg))
y <- y*diff(his$mids[1:2])*length(mpg)
lines(x, y, col="blue", lwd=2)
den <- density(mtcars$mpg)
plot(den, xlab = "MPG", main ="Density Plot of MPG")
par(mfrow = c(1, 2))
mpg <- mtcars$mpg
his <- hist(mpg, breaks=10, col="green", xlab="Miles Per Gallon", main="Histogram of MPG")
x <- seq(min(mpg),max(mpg),length=40)
y <- dnorm(x,mean=mean(mpg),sd=sd(mpg))
y <- y*diff(his$mids[1:2])*length(mpg)
lines(x, y, col="blue", lwd=2)
den <- density(mtcars$mpg)
plot(den, xlab = "Miles Per Gallon", main ="Density Plot of MPG")
par(mfrow = c(1, 2))
m3 <- mtcars$mpg
h <- hist(mpg, breaks=10, col="green", xlab="Miles Per Gallon", main="Histogram of MPG")
x <- seq(min(m3),max(m3),length=40)
y <- dnorm(x,mean=mean(m3),sd=sd(m3))
y <- y*diff(h$mids[1:2])*length(m3)
lines(x, y, col="blue", lwd=2)
den <- density(mtcars$mpg)
plot(den, xlab = "Miles Per Gallon", main ="Density of MPG")
data(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit)$coefficient
fit4 <- lm(data=mtcars, mpg~wt+am+wt*am)
a2 <- mtcars[mtcars$am == 0, ]
m2 <- mtcars[mtcars$am == 1, ]
plot(a2$wt, a2$mpg, col="light blue", pch=19, cex=2, xlab="Weight", ylab="Miles Per Gallon")
points(m2$wt, m2$mpg, col="green", pch=19, cex=2)
abline(c(fit4$coeff[1], fit4$coeff[2]), col="blue", lwd=3, lty=2)
abline(c(fit4$coeff[1]+fit4$coeff[3], fit4$coeff[2]+fit4$coeff[4]), col="green", lwd=3, lty=2)
legend("topright", pch=19, col=c("light blue", "green"), legend=c("Manual", "Automatic"))
data("mtcars")
sort(cor(mtcars)[1, ])
Histogram of the MPG variable that shows it's distribution
```{r, warning=FALSE, message=FALSE}
par(mfrow = c(1, 2))
m3 <- mtcars$mpg
h <- hist(m3, breaks=10, col="green", xlab="Miles Per Gallon", main="Histogram of MPG")
one <- seq(min(m3),max(m3),length=40)
two <- dnorm(one,mean=mean(m3),sd=sd(m3))
two <- two*diff(h$mids[1:2])*length(m3)
lines(one, two, col="red", lwd=2)
d <- density(mtcars$mpg)
plot(d, xlab = "Miles Per Gallon", main ="Density of MPG")
library("ggplot2")
mtcars$am <- factor(mtcars$am, levels = c(0, 1), labels = c("automatic", "manual"))
mpg = ggplot(mtcars, aes(am, mpg, fill = am))
mpg = mpg + geom_boxplot()
mpg
data(mtcars)
library("ggplot2")
mtcars$am <- factor(mtcars$am, levels = c(0, 1), labels = c("automatic", "manual"))
mpg = ggplot(mtcars, aes(am, mpg, fill = am))
mpg = mpg + geom_boxplot() + xlab("Transmission Type") + ylab("Miles Per Gallon")
mpg
data(mtcars)
library("ggplot2")
mtcars$am <- factor(mtcars$am, levels = c(0, 1), labels = c("automatic", "manual"))
plot1 = ggplot(mtcars, aes(am, mpg, fill = am))
plot1 = plot1 + geom_boxplot() + xlab("Transmission Type") + ylab("Miles Per Gallon")
plot1
library(MASS)
head(shuttle)
install.packages("swirl")
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(child, 4) ~ patent, galton)
plot(jitter(child, 4) ~ parent, galton)
regrline <- lm(child ~ patent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col= 'red')
summary(regrline)
child~parent
fit <- lm(child~partent, galton)
fit <- lm(child~parent, galton)
summary(fit)
fit$residuals
mean(fit$residuals)
cov(fit$residuals)
cov(fit$residuals, galton$parent)
library(shiny)
setwd('~/R/DevelopingData')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
SV <-  function(Baselength,BaseWidth,Height) {
final2 <-(2*(Baselength*BaseWidth)*Height) + (Baselength*BaseWidth)^2
final2}
SV(15, 15, 17)
PV <- function(Baselength,BaseWidth,Height) {
final <- Baselength*BaseWidth*Height*.333333
final}
pv(15, 15,17)
PV(15, 15, 17)
SV <-  function(Baselength,BaseWidth,Height) {
Base <- Baselength*BaseWidth
final2 <-(2*Base*Height) + Base^2
final2}
SV(15, 15, 17)
10^2+(10/2)^2
12^2+(10/2)^2
sqrt(12^2+(10/2)^2)
1/2*10*13
SV <-  function(Baselength,BaseWidth,Height) {
Base <- Baselength*BaseWidth
S <- sqrt(Height^2+(Baselength/2)^2
A <-1/2*Baselength*S
final2 <-(4*A) + Base
final2}
SV <-  function(Baselength,BaseWidth,Height) {
Base <- Baselength*BaseWidth
S <- sqrt(Height^2+(Baselength/2)^2
Area <-1/2*Baselength*S
final2 <-(4*Area) + Base
final2}
SV <-  function(Baselength,BaseWidth,Height) {
Base <- Baselength*BaseWidth
S <- sqrt(Height^2+(Baselength/2)^2
AR <-1/2*Baselength*S
final2 <-(4*AR) + Base
final2}
SV <-  function(Baselength,BaseWidth,Height) {
Base <- Baselength*BaseWidth
S <- sqrt(Height^2+(Baselength/2)^2)
AR <-1/2*Baselength*S
final2 <-(4*AR) + Base
final2}
sv(10,10, 12)
SV(10,10, 12)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
PV <- function(Baselength,BaseWidth,Height) {
final <- Baselength*BaseWidth*Height*.333333
final}
PV(10, 10, 12)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
IN <-  function(Baselength,BaseWidth,Height) {
final3 <- text(Baselength , BaseWidth , Height)
final3}
IN(10, 10, 12)
IN <-  function(Baselength,BaseWidth,Height) {
final3 <- string(Baselength , BaseWidth , Height)
final3}
IN(10, 10, 12)
IN <-  function(Baselength,BaseWidth,Height) {
final3 <- paste(Baselength , BaseWidth , Height)
final3}
IN(10, 10, 12)
runApp()
runApp()
